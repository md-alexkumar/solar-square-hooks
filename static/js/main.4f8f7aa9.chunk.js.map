{"version":3,"sources":["Hooks.jsx","serviceWorker.js","index.js"],"names":["Hooks","useState","showPreview","setShowPreview","panelData","setPanelData","initialPanelData","key","selected","handleOutsideClick","useCallback","e","document","getElementById","contains","target","length","useEffect","addEventListener","removeEventListener","updateSelectedRow","rowIdx","columnIdx","updateData","selectedRowData","getNewRow","panelLength","Array","from","_","i","addOneRightColumn","map","panel","idx","panelInfo","lastCellData","splice","addOneLeftColumn","firstCellData","className","onClick","prevPreview","id","panelRow","panelColumn","lastColumnIdx","lastRowIdx","updatedPanel","newTopRow","newBottomRow","onCellClick","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f8f7aa9.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nexport default function Hooks() {\n  const [showPreview, setShowPreview] = useState(false);\n  const [panelData, setPanelData] = useState([]);\n  const initialPanelData = [\n    [\n      { key: 0, selected: false },\n      { key: 1, selected: false },\n      { key: 2, selected: false },\n      { key: 3, selected: false },\n    ],\n    [\n      { key: 0, selected: false },\n      { key: 1, selected: false },\n      { key: 2, selected: false },\n      { key: 3, selected: false },\n    ],\n    [\n      { key: 0, selected: false },\n      { key: 1, selected: false },\n      { key: 2, selected: false },\n      { key: 3, selected: false },\n    ],\n    [\n      { key: 0, selected: false },\n      { key: 1, selected: false },\n      { key: 2, selected: false },\n      { key: 3, selected: false },\n    ],\n  ];\n  const handleOutsideClick = useCallback(\n    (e) => {\n      if (!document.getElementById(\"solar-container\").contains(e.target)) {\n        if (!panelData.length) {\n          setPanelData(initialPanelData);\n        }\n      }\n    },\n    [initialPanelData, panelData]\n  );\n  useEffect(() => {\n    document.addEventListener(\"click\", handleOutsideClick);\n    return () => {\n      document.removeEventListener(\"click\", handleOutsideClick);\n    };\n  }, [handleOutsideClick]);\n\n  const resetPanel = () => {\n    setPanelData(initialPanelData);\n  };\n  const togglePanelView = () => {\n    setShowPreview((prevPreview) => !prevPreview);\n  };\n\n  const onCellClick = (rowIdx, columnIdx) => {\n    if (!showPreview) {\n      const lastColumnIdx = panelData[0].length - 1;\n      const lastRowIdx = panelData.length - 1;\n      if (rowIdx === 0) {\n        if (columnIdx === 0) {\n          const updatedPanel = addOneLeftColumn(rowIdx);\n          const newTopRow = getNewRow(updatedPanel[0].length);\n          setPanelData([newTopRow, ...updatedPanel]);\n        } else if (columnIdx === lastColumnIdx) {\n          const updatedPanel = addOneRightColumn(rowIdx);\n          const newTopRow = getNewRow(updatedPanel[0].length);\n          setPanelData([newTopRow, ...updatedPanel]);\n        } else {\n          const updatedPanel = updateSelectedRow(rowIdx, columnIdx);\n          const newTopRow = getNewRow(updatedPanel[0].length);\n          setPanelData([newTopRow, ...updatedPanel]);\n        }\n      } else if (rowIdx === lastRowIdx) {\n        if (columnIdx === 0) {\n          const updatedPanel = addOneLeftColumn(rowIdx);\n          const newBottomRow = getNewRow(updatedPanel[0].length);\n          setPanelData([...updatedPanel, newBottomRow]);\n        } else if (columnIdx === lastColumnIdx) {\n          const updatedPanel = addOneRightColumn(rowIdx);\n          const newBottomRow = getNewRow(updatedPanel[0].length);\n          setPanelData([...updatedPanel, newBottomRow]);\n        } else {\n          const updatedPanel = updateSelectedRow(rowIdx, columnIdx);\n          const newBottomRow = getNewRow(updatedPanel[0].length);\n          setPanelData([...updatedPanel, newBottomRow]);\n        }\n      } else {\n        if (columnIdx === 0) {\n          const updatedPanel = addOneLeftColumn(rowIdx);\n          setPanelData([...updatedPanel]);\n        } else if (columnIdx === lastColumnIdx) {\n          const updatedPanel = addOneRightColumn(rowIdx);\n          setPanelData([...updatedPanel]);\n        } else {\n          const updatedPanel = updateSelectedRow(rowIdx, columnIdx);\n          setPanelData([...updatedPanel]);\n        }\n      }\n    }\n  };\n  const updateSelectedRow = (rowIdx, columnIdx) => {\n    const updateData = [...panelData];\n    let selectedRowData = [...updateData[rowIdx]];\n    selectedRowData[columnIdx] = {\n      ...selectedRowData[columnIdx],\n      selected: !selectedRowData[columnIdx].selected,\n    };\n    updateData[rowIdx] = selectedRowData;\n    return updateData;\n  };\n  const getNewRow = (panelLength) => {\n    return Array.from(Array(panelLength), (_, i) => ({\n      key: i,\n      selected: false,\n    }));\n  };\n  const addOneRightColumn = (rowIdx) => {\n    return panelData.map((panel, idx) => {\n      const panelInfo = [...panel];\n      const lastCellData = panelInfo[panelInfo.length - 1];\n      panelInfo.splice(\n        -1,\n        1,\n        ...[\n          {\n            ...lastCellData,\n            selected:\n              idx === rowIdx ? !lastCellData.selected : lastCellData.selected,\n          },\n          { key: panelInfo.length, selected: false },\n        ]\n      );\n      return panelInfo;\n    });\n  };\n  const addOneLeftColumn = (rowIdx) => {\n    return panelData.map((panel, idx) => {\n      const panelInfo = [...panel];\n      const firstCellData = panelInfo[panelInfo.length - 1];\n      panelInfo.splice(\n        0,\n        1,\n        ...[\n          { key: panelInfo.length, selected: false },\n          {\n            ...firstCellData,\n            selected:\n              idx === rowIdx ? !firstCellData.selected : firstCellData.selected,\n          },\n        ]\n      );\n      return panelInfo;\n    });\n  };\n  return (\n    <>\n      {panelData.length ? (\n        <div className=\"justify-content-center p-3\">\n          <button className=\"btn btn-primary\" onClick={togglePanelView}>\n            {showPreview ? \"Back to design\" : \"Final Design\"}\n          </button>\n          {!showPreview ? (\n            <button className=\"btn btn-danger ml-2\" onClick={resetPanel}>\n              Reset\n            </button>\n          ) : null}\n        </div>\n      ) : null}\n      <div id=\"solar-container\" className=\"flex-column center\">\n        {!panelData.length ? (\n          <div className=\"center\">\n            Click anywhere to construct initial panel..\n          </div>\n        ) : (\n          <>\n            {panelData.map((panelRow, rowIdx) => (\n              <div key={rowIdx} className=\"flex-row\">\n                {panelRow.map((panelColumn, columnIdx) => (\n                  <div\n                    key={columnIdx}\n                    onClick={() => onCellClick(rowIdx, columnIdx)}\n                    className={`solar-box center ${\n                      panelColumn.selected && \"selected-panel\"\n                    } ${!showPreview && \"solar-box-border edit-design\"}`}\n                  ></div>\n                ))}\n              </div>\n            ))}\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Hooks from \"./Hooks\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Hooks />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}